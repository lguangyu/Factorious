#!/usr/bin/env python3

import io
import sys
import json
import math
import argparse
#import textwrap
import itertools
import collections
#
import facc
import versions


TIME_UNITS = ["sec", "min", "hr"]
TIME_TO_SEC = {
	"sec": 1.0,
	"min": 60.0,
	"hr": 3600.0,
}


################################################################################
# argument parse
def stage_parse_args(func):
	def wrapper(argv, namespace):
		pass


def _stage_argparse_get_factorio_version(argv, namespace):
	# construction of main argument parser needs this information
	# local subparser
	ap = argparse.ArgumentParser(add_help = False)
	ag = ap.add_argument_group("database selection")
	ag.add_argument("-v", "--factorio-version", type = str, metavar = "ver",
		default = versions.default,
		help = "use recipe database version (default: %s)" % versions.default)
	# get args
	_, unparsed = ap.parse_known_args(argv, namespace)
	namespace.FACTORIO = versions.get(namespace.factorio_version)
	return ap, unparsed


def _stage_argparse_list_actions(argv, namespace):
	# if --list-items and --list-recipes are set
	# these should be executed immediately regardless of errors in other args
	# local subparser
	ap = argparse.ArgumentParser(add_help = False)
	ag = ap.add_argument_group("viewing actions")
	ag.add_argument("--list-items", action = "store_true",
		help = "list all items in specified database and exit")
	ag.add_argument("--list-recipes", action = "store_true",
		help = "list all recipes in specified database and exit")
	# get args
	_, unparsed = ap.parse_known_args(argv, namespace)
	if namespace.list_items or namespace.list_recipes:
		print_items_and_recipes(namespace)
		ap.exit(0)
	return ap, unparsed
	

# viewing
def print_items_and_recipes(_args) -> None:
	recp_list = load_raw_recipes(_args.FACTORIO.RECIPE_JSON)
	recipe_set = get_recipe_set(recp_list,
		yield_level = _args.FACTORIO.DEFAULT_YIELD_LEVEL)
	fh = sys.stdout
	for _do, _header, _iter in [
			(_args.list_items, "ITEMS >> %s", recipe_set.iterate_items()),
			(_args.list_recipes, "RECIPES >> %s", recipe_set.iterate_recipes()),
		]:
		if _do:
			h = _header % _args.FACTORIO.RECIPE_JSON
			print("_" * len(h), file = fh)
			print(h, file = fh)
			for i in sorted(_iter):
				print(i, file = fh)
	return



def get_args():
	# cumulatively parse args in stages
	ns = argparse.Namespace()
	unparsed = sys.argv[1:]
	############################################################################
	# first get factorio version selection
	_ver_parser, unparsed\
		= _stage_argparse_get_factorio_version(unparsed, namespace = ns)
	############################################################################
	# used if --list-items or --list-recipes are set
	# this action happens before the main argument parse
	# and should be ignore parsing errors unique to the full parsing
	_list_act_parser, unparsed\
		= _stage_argparse_list_actions(unparsed, namespace = ns)
	############################################################################
	# the full argument parser
	# note args already has something in it
	ap = argparse.ArgumentParser(parents = [_ver_parser, _list_act_parser])
	ap.add_argument("targets", type = str,
		help = "production targets for calculation, in <item,rate> format for\
			each target, separated by colon (:) between targets; for example,\
			'inserter,10:iron-plate,20:science-pack-1,10'; read from stdin if\
			set to - and assumes in CSV format (each line being a target)")
	#
	ag = ap.add_argument_group("basic options")
	ag.add_argument("-y", "--yield-level", type = str,
		choices = ["normal", "expensive"], default = "normal",
		help = "yield difficulty level (default: normal)")
	ag.add_argument("-u", "--rate-unit", type = str,
		choices = ["sec", "min", "hr"], default = "min",
		help = "assume <targets> production in per <unit> rate (default: min)")
	ag.add_argument("-g", "--graph", type = str, metavar = "gv",
		help = "add a graphic visualization in addition to tabular output")
	# 
	ag = ap.add_argument_group("recipe/item options")
	ag.add_argument("-L", "--without-coal-liquefaction", action = "store_true",
		help = "exclude coal liquefaction recipe (default: off)")
	ag.add_argument("-O", "--without-oil-processing", action = "store_true",
		help = "exclude both basic and advanced oil processing recipes, tends\
		to source oil products from coal liquefaction (default: off)")
	ag.add_argument("--raw-material", type = str,
		metavar = "item1,item2,...", default = "",
		help = "assign listed items, separated by comma (,), to be manually raw\
			material, in addition to those items don't have producing recipes\
			(a.k.a. naturally raw); raw material is considered as direct\
			input and will prevent further upstream traversing of the recipe\
			tree (default: <empty>)")
	ag = ap.add_argument_group("optimization options")
	ag.add_argument("--tolerance", type = float,
		metavar = "float", default = 1e-6,
		help = "float comparison tolerance used in optimization (default: 1e-6)")
	ag.add_argument("--use-weight", type = str,
		metavar = "item1,%v:item2,%v:...", default = "",
		help = "force items on this list, separated by colon (:), using the\
			assigned weight values (v's) when calculating the optimization\
			object function; higher weight instructs the optimizer to search for\
			a solution using correspondingly less; the default weight for fluids\
			is %.2f and 1.0 for all others; explicitly specifying weight values\
			overrides the trivial flag for assigned items (default <empty>)"\
			% ns.FACTORIO.DEFAULT_FLUID_WEIGHT)
	ag.add_argument("--append-trivial", type = str,
		metavar = "item1,item2,...", default = "",
		help = "assign listed items, separated by comma (,), to be manually\
			trivial in addition to the default list [%s] (if used); trivial\
			material has all properties of raw material, and additionally are\
			excluded from optimization on consumption; it is equivalent to set\
			both --raw-material and --use-weight to 0.0 for that item\
			(default: <empty>)"\
			% (",".join(ns.FACTORIO.COMMON_TRIVIALS)))
	ag.add_argument("--no-default-trivial", action = "store_true",
		help = "do not use the default trivial items list [%s] (default: off)"\
			% (",".join(ns.FACTORIO.COMMON_TRIVIALS)))
	ag.add_argument("--disable-cyclic-optimization", action = "store_true",
		help = "do not use the cyclic recipe optimizer; this option only affects\
			optimizing outputs belong to cyclic recipe groups, i.e. which can be\
			recycled after some other processes and reproduce some of its own\
			ingredients; e.g. in Factorio version 0.15, the only known of such\
			is 'uranium-fuel-cell'; assign this flag will force disabling the\
			recycling and craft purely with raw material (default: off)")
	# full parsing
	ap.parse_args(unparsed, ns)
	# refine args
	ns.refined_targets = argsrefine_parse_targets(ns)
	ns.refined_excluded_recipes = argsrefine_excluded_recipes(ns)
	ns.refined_raws = argsrefine_manual_raws(ns)
	ns.refined_trivials = argsrefine_trivials(ns)
	ns.refined_weights = argsrefine_weights_after_trivial(ns)
	return ns


################################################################################
# argument refinings
def parse_item_key_value_pair(
		s: str,
		#default_value: float = None,
	) -> (str, float):
	kv = s.split(",")
	if len(kv) == 2:
		return kv[0], float(kv[1])
	#elif (len(kv) == 1) and (default_value is not None):
	#	return kv[0], float(default_value)
	raise ValueError("bad <item,value> pair: '%s'" % s)
	return


def argsrefine_parse_targets(_args) -> dict:
	if _args.targets == "-":
		ts = sys.stdin.read().splitlines()
	else:
		ts = _args.targets.split(":")
	return dict([parse_item_key_value_pair(t) for t in ts if t])


def argsrefine_excluded_recipes(_args) -> list:
	ret = []
	if _args.without_coal_liquefaction:
		ret.append("coal-liquefaction")
	if _args.without_oil_processing:
		ret.append("basic-oil-processing")
		ret.append("advanced-oil-processing")
	return ret


def argsrefine_trivials(_args) -> set:
	trivials = filter(bool, _args.append_trivial.split(","))
	trivials = set(trivials)
	if not _args.no_default_trivial:
		trivials.update(_args.FACTORIO.COMMON_TRIVIALS)
	return trivials


def argsrefine_manual_raws(_args) -> list:
	return _args.raw_material.split(",")


def argsrefine_weights_after_trivial(_args) -> dict:
	# first, add default
	ws = {i: _args.FACTORIO.DEFAULT_FLUID_WEIGHT\
		for i in _args.FACTORIO.FLUIDS if i not in _args.refined_trivials}
	# parse user specified
	user = dict([parse_item_key_value_pair(i)\
		for i in _args.use_weight.split(":") if i])
	# merge, also override default
	ws.update(user)
	return ws


################################################################################
# main
def main():
	try:
		args = get_args()
		# resolving args
		# load, refining data
		recp_list = load_raw_recipes(args.FACTORIO.RECIPE_JSON)
		assert type(recp_list) == list
		# make RecipeSet
		append_madeup_recipes_inplace(recp_list, args)
		recipe_set = get_recipe_set(recp_list,
			yield_level = args.yield_level,
			excluded_recipes = args.refined_excluded_recipes)
		apply_maunal_item_flags(recipe_set,
			raw_items = args.refined_raws, trivial_items = args.refined_trivials)
		# towards production calculations
		prod_tree = ExportableProductionTree(recipe_set)#, copy = True)
		# do calculation
		prod_tree.calculate_targets(args.refined_targets,\
			optim_args = dict(
				weights = args.refined_weights.copy(),
				ignore_trivial = False,
				no_cyclic = args.disable_cyclic_optimization,
				tol = args.tolerance)
		)
		# output
		prod_tree.to_tabular(file = sys.stdout,\
			tune_db = args.FACTORIO, time_unit = args.rate_unit)
		if args.graph:
			prod_tree.visualize(file = args.graph)
	except Exception as e:
		raise e
		#print("error: " + e.args[0], file = sys.stderr)
	return



################################################################################
# load recipes
def load_raw_recipes(json_f: str) -> list:
	with open(json_f, "r") as fh:
		rs = json.load(fh)
	# ensure list
	if isinstance(rs, dict):
		# returning iterator
		rs = list(rs.values())
	return rs


def append_madeup_recipes_inplace(recipe_list, _args):
	recipe_list += _args.FACTORIO.MADEUP_RECIPES
	return


def get_recipe_set(raws, *,
		yield_level = "normal",
		excluded_recipes: list = [],
	) -> list:
	# create Recipe objects
	recipes = []
	for v in itertools.chain(raws):
		if v["name"] not in excluded_recipes:
			if v.get(yield_level, None):
			# we tried to replace it with None on with missed "expensive"s,
			# thus below should be fine :)
			#if v[mode]:
				group = v[yield_level]
			else:
				group = v["normal"]
			_r = facc.Recipe(name = v["name"], category = v["category"],
				inputs = group["ingredients"], products = group["results"],
				craft_time = group["craft_time"])
			recipes.append(_r)
	# construct recipe set
	# force net yield to be True
	#recipe_set = facc.RecipeSet(recipes, copy = True, net_yield = True)
	recipe_set = facc.RecipeSet(recipes, net_yield = True)
	return recipe_set


def apply_maunal_item_flags(recipe_set,
		raw_items = [],
		trivial_items = [],
	) -> None:
	recipe_set.set_items_flag(raw_items,\
		action = lambda x: x.setflag_forced_raw(True))
	recipe_set.set_items_flag(trivial_items,
		action = lambda x: x.setflag_trivial(True))
	return


################################################################################
# output
def _fmt_float(v, len_lim = 7, strip_int = False):
	low_lim = math.pow(10, max(3 - len_lim, -4))
	high_lim = math.pow(10, len_lim + 1)
	_abs_v = abs(v)
	_int_v = int(round(v))
	if (_abs_v < low_lim) or (_abs_v >= high_lim):
		_format = "%%.%de" % min(len_lim - 6, 3)
	elif strip_int and math.isclose(v, _int_v) and _int_v >= 10:
		return str(_int_v)
	elif _abs_v < 0.01:
		_format = "%%.%df" % min(len_lim - 2, 4)
	elif _abs_v < 0.1:
		_format = "%%.%df" % min(len_lim - 3, 3)
	elif _abs_v < 2:
		_format = "%%.%df" % min(len_lim - 4, 2)
	#elif _abs_v < 10:
	#	_format = "%%.%df" % min(len_lim - 5, 2)
	elif _abs_v < 100:
		_format = "%%.%df" % min(len_lim - 5, 1)
	else:
		return "%d" % v
	return _format % v
	

class ExportableProductionTree(facc.ProductionTree):
	def to_tabular(self, file: io.IOBase or str, *ka, **kw) -> None:
		if isinstance(file, str):
			with open(file, "w") as fh:
				self.to_tabular(fh, *ka, **kw)
			return
		elif isinstance(file, io.IOBase):
			self.to_tabular_handler(file, *ka, **kw)
			return
		raise TypeError("'file' must be either 'str' or valid file handle")
		return


	def to_tabular_handler(self, fh, tune_db, time_unit, header = "") -> None:
		category_cfg = tune_db.RECIPE_CATEGORIES
		crafter_cfg = tune_db.CRAFTERS
		targ, rexe, raw, wst = self.get_current_profile()
		cons, prod = self.get_current_item_summary()
		########################################################################
		# header
		if header:
			print(header, file = fh)
			print("", file = fh)
		########################################################################
		# targets
		dataline_fmt = "{:>3}. {:<35}{:>20}"
		print("I. TARGETS > %d total" % len(targ), file = fh)
		print("_" * 60, file = fh)
		if not targ:
			print(dataline_fmt.format(0, "[empty]", "-"), file = fh)
		else:
			for i, k in enumerate(sorted(targ.keys())):
				print(dataline_fmt.format(i + 1, k,\
					_fmt_float(targ[k]) + " /" + time_unit), file = fh)
		print("", file = fh)
		########################################################################
		# recipe exec
		_exu_w = 31
		_exu_totw = _exu_w * 3 + 6
		_exu_fmt = "{:<%d} {:>%d}" % (_exu_w - 10, 9)
		headline_fmt = (("_" * 40) + "_{:_>12} {:_>12} ____{:_^%d}") % _exu_totw
		dataline_fmt = ("{:>3}. {:<35} {: >12} {: >12}   | {: <%d}") % _exu_totw
		print("II. RECIPES INFO > %d total" % len(rexe), file = fh)
		headline = headline_fmt\
			.format(" exec/%s" % time_unit, " std.units", " unit [load] ")
		print("_" * len(headline), file = fh)
		print(headline, file = fh)
		if not rexe:
			print(dataline_fmt.format(0, "[empty]", *("-") * 3), file = fh)
		else:
			for i, k in enumerate(sorted(rexe.keys())):
				_recp = self.get_recipe(k)
				_exe = rexe[k]
				_std = _exe * _recp.craft_time / TIME_TO_SEC[time_unit]
				# each field format is defined above
				_exu = [_exu_fmt.format(c[:_exu_w - 9], "[%s]"\
						% _fmt_float(_std / crafter_cfg[c]["speed"])\
					) for c in category_cfg[_recp.category]]
				_exu = " | ".join([("{:^%d}" % _exu_w).format(i) for i in _exu])
				print(dataline_fmt.format(i + 1, k, _fmt_float(_exe, 12, True),\
					_fmt_float(_std, 12, True), _exu), file = fh)
		print("", file = fh)
		########################################################################
		# item consumption/production/wasting
		headline_fmt = ("_" * 40) + "_{:_>13} {:_>13} {:_>13}"
		dataline_fmt = "{:>3}. {:<35} {: >13} {: >13} {: >13}"
		for _title, _data in [
				("III. RAW MATERIAL INPUT", raw),
				("IV. ITEM CONSUMPTION", cons),
				("V. ITEM PRODUCTION", prod),
				("VI. ITEM WASTING", wst),
			]:
			print("%s INFO > %d total" % (_title, len(_data)), file = fh)
			headline = headline_fmt\
				.format(*[" ~/%s" % u for u in TIME_UNITS])
			print("_" * len(headline), file = fh)
			print(headline, file = fh)
			if not _data:
				print(dataline_fmt.format(0, "[empty]", *("-") * 3), file = fh)
			else:
				sorted_descend = sorted(_data.items(),\
					key = lambda x: x[1], reverse = True)
				for i, (k, c) in enumerate(sorted_descend):
					r = c / TIME_TO_SEC[time_unit] # per second
					print(dataline_fmt.format(i + 1, k,\
						*[_fmt_float(r * TIME_TO_SEC[u], 13)
							for u in TIME_UNITS]),
						file = fh)
			print("", file = fh)
		return


	def visualize(self, file: str, title: str = None) -> None:
		for node in self.get_current_tree():
			print(node)
		#graph = graphviz.Digraph(title)
		#
		#targ, rexe, raw, wst = self.get_current_profile()
		#cons, prod = self.get_item_summary()

		# create nodes
		# TODO: colors of each nodes
		return


################################################################################
if __name__ == "__main__":
	main()
